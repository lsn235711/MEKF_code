sample(1:10)
sample(1:10, 3)
source("MEKF/multienv.R")
source("MEKF/accumulation_test.R")
source("MEKF/importance_stats.R")
set.seed(1)
n = 100 ## number of observations
p = 50 ## number of variables
k = 20 ## number of nonnulls
num_env = 3 ## number of environments
amplitude = 3
rhos = rep(0,10)
nonnulls = sample(1:p, k)
beta = matrix(rep(0,num_env*p), nrow = p)
for (i in 1:num_env){
beta[nonnulls, i] = 1
}
beta = beta* amplitude / sqrt(n)
## generate X and Y from a linear model
Xs = list()
ys = list()
for (i in 1:num_env){
X = matrix(rnorm(n*p),n)
Xs[[i]] = X
y = X %*% beta[,i] + rnorm(n)
ys[[i]] = y
}
##------------------------
## Create knockoffs
##------------------------
X_ks = list()
for (i in 1:num_env){
X_ks[[i]] = create.gaussian(X, rep(0,p), toeplitz(rhos[i]^(0:(p-1))))
}
W_matrix = NULL
for (i in 1:num_env){
W = stat.lasso_coefdiff(Xs[[i]], X_ks[[i]], ys[[i]])
W_matrix = cbind(W_matrix,W)
}
## Consistency testing
invariant_model(W_matrix)
## Parital consistency testing (Selective Seqstep+)
partial_conjunction(W_matrix, r = 2)
## Parital consistency testing (Accumulation test)
partial_conjunction(W_matrix, r = 2, method = "accumulation")
getwd()
